#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Êó•ÊñáÂ≠óÁ¨¶Ê£ÄÊµãÊ≠£Âàô
const hiraganaRegex = /[\u3040-\u309F]/g;
const katakanaRegex = /[\u30A0-\u30FF]/g;

// Â∫îËØ•‰øùÁïôÁöÑÊó•ÊñáÂÜÖÂÆπÔºà‰∏çÈúÄË¶Å‰øÆÊîπÔºâ
const PRESERVE_PATTERNS = [
    /japaneseName\s*:\s*['"`].*?['"`]/g,
    /officialName\s*:\s*['"`].*?['"`]/g,
    /\/\/ ÂÆòÊñπÂêçÁß∞.*$/gm,
    /venue\s*:\s*['"`].*?['"`]/g, // ‰ºöÂú∫ÂêçÁß∞ÂèØËÉΩÂåÖÂê´ÂÆòÊñπÊó•Êñá
];

// Â∏∏Áî®ÁøªËØëÂØπÁÖßË°®
const TRANSLATION_MAP = {
    // ‰∏≠ÁÇπÁ¨¶Âè∑
    '„Éª': '„ÄÅ',
    
    // Â∏∏Áî®ÁâáÂÅáÂêç
    '„Éû„É™„Éº„É≥„Ç∫': 'Êµ∑Ê¥ãÈòü',
    '„Çπ„Çø„Éº„Éû„Ç§„É≥': 'ËøûÂèëËä±ÁÅ´',
    '„Éó„É≠„É†„Éä„Éº„Éâ': 'Ê≠•Ë°åÈÅì',
    '„Çµ„Éû„Éº„Ç´„Éº„Éã„Éê„É´': 'Â§èÂ≠£ÂòâÂπ¥Âçé',
    '„Éä„Ç§„Éà„Éï„É©„ÉØ„Éº„Ç∫': 'Â§úÈó¥Ëä±ÁÅ´',
    '„Ç∑„É≥„Éï„Ç©„Éã„Ç¢': '‰∫§ÂìçÊõ≤',
    '„Ç≥„Çπ„É¢„ÉØ„Éº„É´„Éâ': 'ÂÆáÂÆô‰∏ñÁïå',
    '„É°„Ç§„É≥': '‰∏ªË¶Å',
    '„Éê„Çπ': 'Â∑¥Â£´',
    '„Ç®„É™„Ç¢': 'Âå∫Âüü',
    '„Çπ„Éö„Éº„Çπ': 'Á©∫Èó¥',
    '„Éë„Éº„Ç≠„É≥„Ç∞': 'ÂÅúËΩ¶',
    '„Éü„É•„Éº„Ç∏„ÉÉ„ÇØ': 'Èü≥‰πê',
    '„Éï„Ç°„Éº„É†': 'ÂÜúÂú∫',
    '„Éû„Ç∂„Éº': 'ÊØç‰∫≤',
    '„Éï„Ç£„Éä„Éº„É¨': 'ÁªàÁ´†',
    '„Ç´„É†„É≠': 'ÈáëÊØõ',
    '„Ç¢„ÇØ„Çª„Çπ': '‰∫§ÈÄö',
    '„Çπ„Éù„ÉÉ„Éà': 'Âú∞ÁÇπ',
    '„É¨„Ç∏„É£„Éº„Ç∑„Éº„Éà': 'ÈáéÈ§êÂû´',
    '„Éà„Ç§„É¨': 'ÂéïÊâÄ',
    '„Ç´„É°„É©': 'Áõ∏Êú∫',
    '„ÉÅ„Ç±„ÉÉ„Éà': 'Á•®Âà∏',
    '„Éõ„Éº„É†„É©„É≥': 'ÂÖ®ÂûíÊâì',
    '„Çπ„Çø„Ç∏„Ç¢„É†': '‰ΩìËÇ≤Âú∫',
    '„Ç∞„ÉÉ„Ç∫': 'ÂïÜÂìÅ',
    '„É´„Éº„É´': 'ËßÑÂàô',
    '„É©„ÉÉ„Ç∑„É•': 'È´òÂ≥∞',
    '„Ç®„É≥„Çø„Éº„ÉÜ„Ç§„É°„É≥„Éà': 'Â®±‰πê',
    '„É©„Ç§„Éñ': 'Áé∞Âú∫',
    '„Ç≥„É©„Éú': 'Âêà‰Ωú',
    '„ÉÄ„Éñ„É´': 'ÂèåÈáç',
    '„Ç´„Ç∏„É•„Ç¢„É´': '‰ºëÈó≤',
    '„É™„É©„ÉÉ„ÇØ„Çπ': 'ÊîæÊùæ',
    '„É≠„Éû„É≥„ÉÅ„ÉÉ„ÇØ': 'Êµ™Êº´',
    '„Éë„Éé„É©„Éû': 'ÂÖ®ÊôØ',
    '„Éì„É•„Éº': 'ÊôØËßÇ',
    '„É≠„Ç±„Éº„Ç∑„Éß„É≥': 'Âú∞ÁÇπ',
    '„Éó„É≠„Ç∞„É©„É†': 'ËäÇÁõÆ',
    '„Ç≥„É≥„Éë„ÇØ„Éà': 'Á¥ßÂáë',
    '„Éè„Ç§„É©„Ç§„Éà': '‰∫ÆÁÇπ',
    '„Çª„ÉÉ„Éà': 'Â•óË£Ö',
    '„Ç≥„É≥„Éô„É≥„Ç∑„Éß„É≥': '‰ºöËÆÆ',
    '„Ç¶„Ç©„Éº„Çø„Éº„Ç¨„Éº„Éá„É≥': 'Ê∞¥‰∏äËä±Âõ≠',
    '„Éó„Éº„É´': 'Ê∏∏Ê≥≥Ê±†',
    '„Ç∑„Éº„Çµ„Ç§„Éâ„É©„Ç§„É≥': 'Êµ∑Êª®Á∫ø',
    
    // Â∏∏Áî®Âπ≥ÂÅáÂêçÂíåÂä©ËØç
    '„Åæ„Å§„Çä': 'Á•≠ÂÖ∏',
    '„ÅÆ': 'ÁöÑ',
    '„Çí': '',  // Âä©ËØçÂà†Èô§
    '„Å´': '',  // Â§ßÈÉ®ÂàÜÊÉÖÂÜµ‰∏ãÂà†Èô§
    '„Åå': '',  // Âä©ËØçÂà†Èô§
    '„Åß': '',  // Â§ßÈÉ®ÂàÜÊÉÖÂÜµ‰∏ãÂà†Èô§
    '„Åã„Çâ': '‰ªé',
    '„Åæ„Åß': 'Âà∞',
    '„Çà„Çä': 'ÊØî',
    '„Å∏': 'Âà∞',
    '„Å®': 'Âíå',
    '„ÇÑ': 'Âíå',
    '„Å∂„Çä': 'Âπ¥Êù•',
    '„Åô„Åê': 'Á´ãÂç≥',
    '„ÇÑ„ÇÑ': 'Á®çÂæÆ',
    '„Å™„Åó': 'Êó†',
    '„ÅÇ„Çä': 'Êúâ',
    '„Åü„ÇÅ': 'Âõ†‰∏∫',
    '„Å™„ÅÆ„Åß': 'ÊâÄ‰ª•',
    '„Å´„Å§„ÅÑ„Å¶': 'ÂÖ≥‰∫é',
    '„Å´„Åä„ÅÑ„Å¶': 'Âú®',
    '„Å´„Çà„Çä': 'ÈÄöËøá',
    '„Å®„Åó„Å¶': '‰Ωú‰∏∫',
    '„Å´„Çà„Çã': 'Áî±‰∫é',
    '„Å®„ÅÑ„ÅÜ': 'Áß∞‰∏∫',
    '„Å®„ÅÑ„Å£„Åü': 'Á≠â',
    '„Çå„Çã': '',
    '„Çâ„Çå„Çã': '',
    '„Åô„Çã': '',
    '„Åó„Åü': '',
    '„Åó„Å¶': '',
    '„Åó„ÅÑ': '',
    '„Åó„Åè': '',
    '„Å™„ÅÑ': '',
    '„Å™„Çã': '',
    '„Å™„Çä': '',
    '„Åë„Çã': '',
    '„ÇÅ„Çã': '',
    '„Å¶„Çã': '',
    '„Å¶„ÅÑ„Çã': '',
    '„Å¶„ÅÑ': '',
    '„Åæ„Åô': '',
    '„Åß„Åô': '',
    '„Åß„ÅÇ„Çã': '',
    '„Å†': '',
    '„Åò': '',
    '„Åö': '',
    '„Åû': '',
    '„Å∞': '',
    '„Å≥': '',
    '„Åº': '',
    '„Å±': '',
    '„Å¥': '',
    '„Å∑': '',
    '„Å∫': '',
    '„ÅΩ': '',
    '„Å£': '',
    '„Éº': '',
};

    // ÈúÄË¶ÅÁâπÊÆäÂ§ÑÁêÜÁöÑÊ®°Âºè  
    const SPECIAL_PATTERNS = {
        // Âú∞ÂêçËøûÊé•
        'Â∏Ç„Éª': 'Â∏Ç„ÄÅ',
        'Áî∫„Éª': 'Áî∫„ÄÅ',
        'Áúå„Éª': 'Âéø„ÄÅ',
        'Âå∫„Éª': 'Âå∫„ÄÅ',
        'ÈßÖ„Éª': 'Á´ô„ÄÅ',
        
        // ‰øùÁïô‰∏ìÊúâÂêçËØç‰∏çÁøªËØë
        'MARINES': 'MARINES',  // ÂçÉÂè∂ÁΩóÂæ∑Èòü
        '„Åø„Å™„Å®„Åø„Çâ„ÅÑ': 'Ê∏ØÊú™Êù•',  // Ê®™Êª®Âú∞Âêç
    
    // Êó•ÊúüËøûÊé•
    'Êó•„Éª': 'Êó•„ÄÅ',
    'Êúà„Éª': 'Êúà„ÄÅ',
    
    // Êó∂Èó¥ËøûÊé•  
    'ÊôÇ„Éª': 'Êó∂„ÄÅ',
    'ÂàÜ„Éª': 'ÂàÜ„ÄÅ',
    
    // Â§©Ê∞îÊù°‰ª∂
    'Èõ®Â§©„Éª': 'Èõ®Â§©„ÄÅ',
    'ËçíÂ§©„Éª': 'ÊÅ∂Âä£Â§©Ê∞î„ÄÅ',
    'Âº∑È¢®„Éª': 'Âº∫È£é„ÄÅ',
    'È´òÊ≥¢„Éª': 'È´òÊµ™„ÄÅ',
};

function shouldPreserveContent(line) {
    return PRESERVE_PATTERNS.some(pattern => pattern.test(line));
}

function smartTranslate(text) {
    let result = text;
    
    // ÂÖàÂ§ÑÁêÜÁâπÊÆäÊ®°Âºè
    for (const [japanese, chinese] of Object.entries(SPECIAL_PATTERNS)) {
        result = result.replace(new RegExp(japanese, 'g'), chinese);
    }
    
    // ÂÜçÂ§ÑÁêÜ‰∏ÄËà¨ÁøªËØë
    for (const [japanese, chinese] of Object.entries(TRANSLATION_MAP)) {
        result = result.replace(new RegExp(japanese, 'g'), chinese);
    }
    
    return result;
}

function analyzeFile(filePath) {
    try {
        const content = fs.readFileSync(filePath, 'utf8');
        const lines = content.split('\n');
        const issues = [];
        
        lines.forEach((line, index) => {
            const lineNumber = index + 1;
            
            // Ë∑≥ËøáÂ∫îËØ•‰øùÁïôÁöÑÂÜÖÂÆπ
            if (shouldPreserveContent(line)) {
                return;
            }
            
            // Ê£ÄÊµãÊó•ÊñáÂ≠óÁ¨¶
            const hiragana = line.match(hiraganaRegex);
            const katakana = line.match(katakanaRegex);
            
            if (hiragana || katakana) {
                const originalLine = line.trim();
                const translatedLine = smartTranslate(originalLine);
                
                if (originalLine !== translatedLine) {
                    issues.push({
                        line: lineNumber,
                        original: originalLine,
                        translated: translatedLine,
                        japanese: [...(hiragana || []), ...(katakana || [])]
                    });
                }
            }
        });
        
        return issues;
    } catch (error) {
        console.error(`‚ùå ËØªÂèñÊñá‰ª∂Â§±Ë¥•: ${filePath} - ${error.message}`);
        return [];
    }
}

function previewFixes(targetDir = './src/data') {
    console.log('üîç Êô∫ËÉΩÊó•ÊñáÂ≠óÁ¨¶‰øÆÂ§çÈ¢ÑËßà...\n');
    
    const files = fs.readdirSync(targetDir)
        .filter(file => file.endsWith('.ts'))
        .map(file => path.join(targetDir, file));
    
    let totalFiles = 0;
    let totalIssues = 0;
    
    for (const filePath of files) {
        const issues = analyzeFile(filePath);
        
        if (issues.length > 0) {
            totalFiles++;
            totalIssues += issues.length;
            
            console.log(`üìÑ ${path.relative(process.cwd(), filePath)} (${issues.length}‰∏™ÈóÆÈ¢ò):`);
            
            // Âè™ÊòæÁ§∫Ââç5‰∏™ÈóÆÈ¢ò‰Ωú‰∏∫È¢ÑËßà
            issues.slice(0, 5).forEach(issue => {
                console.log(`   Á¨¨${issue.line}Ë°å:`);
                console.log(`   ÂéüÊñá: ${issue.original}`);
                console.log(`   ‰øÆÂ§ç: ${issue.translated}`);
                console.log(`   Êó•Êñá: ${issue.japanese.join(', ')}`);
                console.log('');
            });
            
            if (issues.length > 5) {
                console.log(`   ... ËøòÊúâ ${issues.length - 5} ‰∏™ÈóÆÈ¢ò\n`);
            }
        }
    }
    
    console.log(`üìä È¢ÑËßàÁªüËÆ°:`);
    console.log(`   ÈúÄË¶Å‰øÆÂ§çÁöÑÊñá‰ª∂: ${totalFiles}`);
    console.log(`   ÊÄªÈóÆÈ¢òÊï∞: ${totalIssues}`);
    
    return { totalFiles, totalIssues };
}

function applyFixes(targetDir = './src/data', dryRun = true) {
    console.log(dryRun ? 'üß™ Âπ≤ËøêË°åÊ®°Âºè - ‰∏ç‰ºöÂÆûÈôÖ‰øÆÊîπÊñá‰ª∂' : '‚úèÔ∏è ÂºÄÂßãÂ∫îÁî®‰øÆÂ§ç...');
    
    const files = fs.readdirSync(targetDir)
        .filter(file => file.endsWith('.ts'))
        .map(file => path.join(targetDir, file));
    
    let fixedFiles = 0;
    let totalFixes = 0;
    
    for (const filePath of files) {
        const issues = analyzeFile(filePath);
        
        if (issues.length > 0) {
            console.log(`üîß ‰øÆÂ§ç ${path.relative(process.cwd(), filePath)}...`);
            
            if (!dryRun) {
                let content = fs.readFileSync(filePath, 'utf8');
                const lines = content.split('\n');
                
                // Â∫îÁî®‰øÆÂ§ç
                issues.forEach(issue => {
                    const lineIndex = issue.line - 1;
                    if (lines[lineIndex] && lines[lineIndex].trim() === issue.original) {
                        lines[lineIndex] = lines[lineIndex].replace(issue.original, issue.translated);
                    }
                });
                
                fs.writeFileSync(filePath, lines.join('\n'), 'utf8');
            }
            
            fixedFiles++;
            totalFixes += issues.length;
            console.log(`   ‰øÆÂ§ç‰∫Ü ${issues.length} ‰∏™ÈóÆÈ¢ò`);
        }
    }
    
    console.log(`\nüìä ‰øÆÂ§çÁªüËÆ°:`);
    console.log(`   ‰øÆÂ§çÁöÑÊñá‰ª∂: ${fixedFiles}`);
    console.log(`   ÊÄª‰øÆÂ§çÊï∞: ${totalFixes}`);
    
    if (dryRun) {
        console.log('\nüí° Ë¶ÅÂ∫îÁî®‰øÆÂ§çÔºåËØ∑ËøêË°å: node scripts/smart-japanese-fixer.js --apply');
    }
}

function main() {
    const args = process.argv.slice(2);
    
    if (args.includes('--preview') || args.length === 0) {
        previewFixes();
    } else if (args.includes('--apply')) {
        console.log('‚ö†Ô∏è  Âç≥Â∞ÜÂ∫îÁî®‰øÆÂ§çÔºåÂª∫ËÆÆÂÖàÂàõÂª∫Â§á‰ªΩÔºÅ');
        console.log('Êåâ Ctrl+C ÂèñÊ∂àÔºåÊàñÁ≠âÂæÖ5ÁßíËá™Âä®ÂºÄÂßã...');
        
        setTimeout(() => {
            applyFixes('./src/data', false);
        }, 5000);
    } else if (args.includes('--dry-run')) {
        applyFixes('./src/data', true);
    } else {
        console.log('‰ΩøÁî®ÊñπÊ≥ï:');
        console.log('  node scripts/smart-japanese-fixer.js --preview   # È¢ÑËßà‰øÆÂ§ç');
        console.log('  node scripts/smart-japanese-fixer.js --dry-run   # Âπ≤ËøêË°å');
        console.log('  node scripts/smart-japanese-fixer.js --apply     # Â∫îÁî®‰øÆÂ§ç');
    }
}

if (require.main === module) {
    main();
} 
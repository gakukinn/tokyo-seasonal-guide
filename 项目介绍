# 关东地区旅游指南 - AI开发指南
这是一款商业网站，以简约实用为基础，挣钱为目的的项目。

## 🤖 AI执行规范（最高优先级）

### **核心原则**
```
1. 严格遵循五层架构 - 每层有固定的职责和模板
2. 绝对使用指定模板 - 不允许自由发挥或创新设计
3. 统一色彩方案 - 浅粉、白色、浅蓝三色调
4. 固定地区管理 - 顺序和图标完全标准化
5. 配置文件驱动 - 数据与样式分离
```

### **五层架构定义**
```
🏠 第1层：主页 (/)                                    - 12个月份选择
📅 第2层：月份页 (/october)                           - 当月活动类型展示  
🎆 第3层：活动类型页 (/october/hanabi)                - 地区选择入口
🏙️ 第4层：地区活动列表页 (/october/hanabi/tokyo)      - 具体活动列表
🎯 第5层：活动详情页 (/october/hanabi/tokyo/shinagawa) - 单个活动详情
```

## 📋 强制模板系统

### **模板文件位置（必须严格使用）**
```
第1层模板：src/app/page.tsx                           
第2层模板：src/components/MonthTemplate.tsx           
第3层模板：src/components/ActivityTemplate.tsx        
第4层模板：src/components/RegionalHanabiTemplate.tsx  
第5层模板：src/components/HanabiDetailTemplate.tsx    
```

### **配置文件系统**
```
月份配置：src/config/monthsConfig.ts          - 第2层数据源
活动配置：src/config/activityConfig.ts        - 第3层数据源（地区顺序固定）
地区数据：src/data/level4-*.ts                - 第4层数据源
活动数据：src/data/level5-*.ts                - 第5层数据源
```

## 🔒 地区管理固定化

### **地区顺序（绝对不可更改）**
```
页面显示顺序：
第一行：🗼 东京 → 🌸 埼玉 → 🏖️ 千叶
第二行：🌊 神奈川 → 🏔️ 甲越信 → 🌿 北关东

代码配置：['tokyo', 'saitama', 'chiba', 'kanagawa', 'koshinetsu', 'kitakanto']
控制文件：src/config/activityConfig.ts
```

### **地区图标（完全固定）**
```
tokyo: '🗼'     kanagawa: '🌊'
saitama: '🌸'   koshinetsu: '🏔️' 
chiba: '🏖️'    kitakanto: '🌿'
```

## 💻 标准模板使用方法

### **第2层：月份页面**
```typescript
// 文件：src/app/october/page.tsx
import MonthTemplate from '@/components/MonthTemplate';

export default function OctoberPage() {
  return <MonthTemplate monthId={10} />;
}

// 数据源：src/config/monthsConfig.ts
// 配置：activities数组（3-6个活动）
```

### **第3层：活动类型页面**
```typescript
// 文件：src/app/october/hanabi/page.tsx
import ActivityTemplate from '@/components/ActivityTemplate';

export default function OctoberHanabiPage() {
  const customRegions = [
    { id: 'tokyo', count: 2, available: true },
    { id: 'saitama', count: 1, available: true },
    // ... 其他地区配置（只能配置count、available、description）
  ];

  return (
    <ActivityTemplate 
      monthId={10} 
      activityId="hanabi" 
      customConfig={{ regions: customRegions }}
    />
  );
}

// 注意：地区顺序和图标由activityConfig.ts固定控制
```

### **第4层：地区活动列表页面**
```typescript
// 文件：src/app/october/hanabi/tokyo/page.tsx
import RegionalHanabiTemplate from '@/components/RegionalHanabiTemplate';
import { events } from '@/data/level4-october-hanabi-tokyo';
import { regionInfo } from '@/data/level4-october-hanabi-tokyo';

export default function OctoberTokyoHanabiPage() {
  return <RegionalHanabiTemplate events={events} regionInfo={regionInfo} />;
}

// 数据文件：src/data/level4-october-hanabi-tokyo.ts
// 必须包含：events数组 + regionInfo对象
```

### **第5层：活动详情页面**
```typescript
// 文件：src/app/october/hanabi/tokyo/shinagawa/page.tsx
import HanabiDetailTemplate from '@/components/HanabiDetailTemplate';
import { eventData, navigationData } from '@/data/level5-october-hanabi-tokyo-shinagawa';

export default function ShinagawaPage() {
  return <HanabiDetailTemplate eventData={eventData} navigationData={navigationData} />;
}

// 数据文件：src/data/level5-october-hanabi-tokyo-shinagawa.ts
```

## 🚫 严格禁止事项

### **绝对禁止的操作**
```
❌ 修改模板布局结构
❌ 更改色彩方案（必须使用浅粉白蓝）
❌ 自定义地区顺序
❌ 自定义地区图标
❌ 创建新的组件结构
❌ 修改面包屑导航样式
❌ 绕过配置文件直接硬编码
❌ 复制粘贴页面代码而不用模板
```

### **允许的操作**
```
✅ 配置活动数量（count）
✅ 设置可用性状态（available）
✅ 修改描述文字（description）
✅ 更新活动数据内容
✅ 调整导航链接地址
✅ 修改文字内容和描述
```

## 🔧 开发工作流程

### **创建新页面的标准流程**
```
步骤1：确定目标层级（第几层？）
步骤2：查找对应模板文件
步骤3：创建页面文件，导入对应模板
步骤4：准备数据文件（如需要）
步骤5：配置props传递给模板
步骤6：测试页面访问和导航
步骤7：验证样式和布局一致性
```

### **错误处理原则**
```
遇到模板冲突：优先使用最新模板
遇到样式问题：检查是否严格使用模板
遇到导航问题：验证路径和面包屑
遇到数据问题：检查配置文件格式
```

## 🎨 设计规范

### **色彩主题（强制执行）**
```
主色调：浅粉色系 (from-rose-100, to-rose-200)
辅助色：白色系 (from-white, to-white)  
强调色：浅蓝色系 (from-blue-100, to-blue-200)
文字色：深灰色系 (text-gray-800, text-gray-700)
```

### **响应式断点**
```
移动端：grid-cols-1 (1列)
平板端：sm:grid-cols-2 (2列)  
桌面端：lg:grid-cols-3 (3列)
```

## 📊 项目当前状态

### **已完成功能**
```
✅ 五层架构完整实现
✅ 模板系统100%统一化
✅ 地区顺序和图标固定化
✅ 十月页面扩展为6个活动
✅ 花火页面地区选择统一化
✅ 第四层东京花火页面完成
✅ 导航链路完整打通
```

### **技术架构**
```
框架：Next.js 15.3.3
运行端口：http://localhost:3000
样式：Tailwind CSS
部署：开发环境（本地）
```

## ⚡ 快速参考

### **常用路径格式**
```
月份页面：/[month]
活动页面：/[month]/[activity]  
地区页面：/[month]/[activity]/[region]
详情页面：/[month]/[activity]/[region]/[event]
```

### **关键配置文件**
```
monthsConfig.ts    - 控制第2层月份页面的活动展示
activityConfig.ts  - 控制第3层的地区顺序和图标
level4-*.ts        - 第4层的活动列表数据
level5-*.ts        - 第5层的活动详情数据
```

### **测试验证要点**
```
页面访问：HTTP 200状态码
导航链路：面包屑和按钮链接正确
样式一致：所有同层页面布局相同
数据展示：配置文件数据正确显示
响应式：移动端和桌面端布局正常
```

## 📝 开发注意事项

### **AI执行建议**
```
1. 开始任务前先确认目标层级
2. 严格按照模板使用方法执行
3. 不确定时优先参考项目介绍文档
4. 遇到冲突时停止并询问用户
5. 完成后进行全面功能测试
6. 确保所有链接和导航正常工作
```

### **维护原则**
```
优先级：项目介绍 > 现有代码 > AI推测
更新：先更新配置文件，再更新页面
测试：每次修改后验证相关页面
一致性：确保同层页面完全一致
```

## 🔍 常见问题解决

### **问题1：地区顺序不对**
```
原因：自定义了地区配置
解决：检查activityConfig.ts中的固定顺序
确认：['tokyo', 'saitama', 'chiba', 'kanagawa', 'koshinetsu', 'kitakanto']
```

### **问题2：模板样式不一致**
```
原因：没有使用标准模板
解决：确保导入了正确的模板组件
检查：模板文件路径是否正确
```

### **问题3：导航链接错误**
```
原因：面包屑路径配置错误
解决：检查monthId、activityId、regionId参数
验证：getActivityPath()函数是否正确调用
```

### **问题4：页面404错误**
```
原因：文件路径与URL不匹配
解决：确保目录结构符合Next.js约定
检查：page.tsx文件是否在正确位置
``` 